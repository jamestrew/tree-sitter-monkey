================================================================================
Math Operators
================================================================================

true == 1;
15 / 3;
foo + "bar";
3 + 4; 5 * 3;

--------------------------------------------------------------------------------
(program
  (expression_statement
    (infix_expression
      left: (true)
      right: (integer)))
  (expression_statement
    (infix_expression
      left: (integer)
      right: (integer)))
  (expression_statement
    (infix_expression
      left: (identifier)
      right: (string)))
  (expression_statement
    (infix_expression
      left: (integer)
      right: (integer)))
  (expression_statement
    (infix_expression
      left: (integer)
      right: (integer))))


================================================================================
Operator Precedence
================================================================================

-a + 1;
!-20;
a + b + c;
a + b / c;
(5 + 5) * 2;
4 + 1 == 5;
3 > 5 != true;
-(5 + 5);

--------------------------------------------------------------------------------
(program
  (expression_statement
    (infix_expression
     (prefix_expression
       (identifier))
     (integer)))
  (expression_statement
    (prefix_expression
      (prefix_expression
        (integer))))
  (expression_statement
    (infix_expression
      (infix_expression
        (identifier)
        (identifier))
      (identifier)))
  (expression_statement
    (infix_expression
      (identifier)
      (infix_expression
        (identifier)
        (identifier))))
  (expression_statement
    (infix_expression
      (grouped_expression
        (infix_expression
          (integer)
          (integer)))
      (integer)))
  (expression_statement
    (infix_expression
      (infix_expression
        (integer)
        (integer))
      (integer)))
  (expression_statement
    (infix_expression
      (infix_expression
        (integer)
        (integer))
      (true)))
  (expression_statement
    (prefix_expression
      (grouped_expression
        (infix_expression
          (integer)
          (integer)))))
)

================================================================================
If Expression
================================================================================

if (x > 5) { 5 }
if (x > 5) {
  x = 5;
  x = x + 1;
}
return if (x > 5) { x };

--------------------------------------------------------------------------------

(program
  (expression_statement
    (if_expression
      (grouped_expression
        (infix_expression
          (identifier)
          (integer)))
      (block_statement
        (expression_statement
          (integer)))))
  (expression_statement
    (if_expression
      (grouped_expression
        (infix_expression
          (identifier)
          (integer)))
      (block_statement
        (assignment
          (identifier)
          (integer))
        (assignment
          (identifier)
          (infix_expression
            (identifier)
            (integer))))))
  (return_statement
    (if_expression
      (grouped_expression
        (infix_expression
          (identifier)
          (integer)))
      (block_statement
        (expression_statement
          (identifier)))))
  )

================================================================================
If Else Expression
================================================================================

if (x > 5) { 5 } else { 4 }

--------------------------------------------------------------------------------
(program
  (expression_statement
    (if_expression
      condition: (grouped_expression
        (infix_expression
          left: (identifier)
          right: (integer)))
      consequence: (block_statement
        (expression_statement
          (integer)))
      alternative: (block_statement
        (expression_statement
          (integer))))))
